package joyme.videofetcher.app;import java.lang.reflect.Array;import java.util.ArrayList;import java.util.regex.Matcher;import java.util.regex.Pattern;import static java.lang.System.out;/** * Created by TianZhang on 28/10/14. */public class PatternMatch {    private static final ArrayList<String> strings = new ArrayList<String>();    private static final String PATTERN_VIDEO_SRC = "<video[^>]+?src=\"(.*?)\"";    private static final String PATTERN_VIDEO_SOURCE_SRC = "<video[^>]+?>.*?<source[^>]+?src=\"(.*?)\"";    public static ArrayList<String> getStringsByPattern(String text) {        Matcher matcher = Pattern.compile(PATTERN_VIDEO_SRC).matcher(text);        Matcher matcher2 = Pattern.compile(PATTERN_VIDEO_SOURCE_SRC).matcher(text);        String str = "";//        matcher.find();        while (matcher.find()) {            str = matcher.group().replace("&amp;", "&");//            out.println("==========    " + matcher.group().replace("&amp;", "&") + "   ===========");        }        while (matcher2.find()) {            str = matcher2.group().replace("&amp;", "&");//            out.println("==========    " + matcher2.group().replace("&amp;", "&") + "   ===========");        }        fetchM3U8FromUrl(str);//        if (matcher.find()) {//            out.println("==========    " + matcher.groupCount() + "   ===========");//            out.println("==========    " + matcher.group() + "   ===========");//        } else {//            matcher = Pattern.compile(PATTERN_VIDEO_SOURCE_SRC).matcher(text);//            if (matcher.find()) {//                out.println("==========    " + matcher2.groupCount() + "   ===========");//                out.println("==========    " + matcher2.group() + "   ===========");//            }//        }        return strings;    }    private static String fetchM3U8FromUrl(String url) {        ArrayList<String> urls = new ArrayList<String>();        String[] strs = splitUrlByIndicator(url, ",");        String finalM3u8 = "";        for (int i = 0; i < strs.length; i++) {            if (strs[i].contains("http") && strs[i].contains("m3u8")) {                int startPoint = strs[i].indexOf("http");                int endPoint = strs[i].indexOf("\"", startPoint);                finalM3u8 = strs[i].substring(startPoint, endPoint);                System.out.println(finalM3u8);            }        }        return finalM3u8;    }    private static String[] splitUrlByIndicator(String url, String splitor) {        String[] strs;        strs = url.split(splitor);        return strs;    }    private PatternMatch() {    }    public static ArrayList<String> getStrings() {        return strings;    }}